/*
 * Copyright (c) 2022.
 * Author: Enrique Nieto Martínez
 * Company: Palace Resorts
 * Created:  2022 / 12 / 1 8:55:6
 *
 */

import {infantGrouping, InfantsGrouped} from 'app/booking/domain/mapper/infantGrouping'

const structuredCLone = (obj: any) => {
  return JSON.parse(JSON.stringify(obj))
}

const totalIfants = (infants: InfantsGrouped) => {
  const infants2 = structuredCLone(infants) as {[index: string]: number}
  let totalInfants = 0
  for (const key in infants) {
    totalInfants += infants2[key]
  }
  return totalInfants
}

describe('Infant classification', () => {
  it('happy path', () => {
    /*
    adults = 18+
    kids = 13-17
    childs = 4-12
    baby = 0-3
    * */
    // DADO que tenemos un arreglo con '0', '2', '15', '7' , '0', '17',  '18' , '19'
    const childrenAges = ['0', '2', '15', '7', '0', '17', '18', '19']

    // CUANDO clasifiquemos
    const infants = infantGrouping(childrenAges, {})
    // ENTONCES deberíamos obtener los siguientes resultados
    // 3 bebé
    // 1 child
    // 2 kids
    // y no deberían contarse los adultos
    expect(infants.babies).toBe(3)
    expect(infants.children).toBe(1)
    expect(infants.kids).toBe(2)
    const existsAdults = Object.hasOwn(infants, 'adults')
    expect(existsAdults).toBe(false)
    expect(totalIfants(infants)).toBeLessThan(childrenAges.length)
  })

  it('bad path', () => {
    // DADO que tenemos un arreglo con '0', '2', '15', '7' , '0', '17',  '18' , '19'
    const childrenAges = ['18', '19']

    // CUANDO clasifiquemos
    const infants = infantGrouping(childrenAges)
    // ENTONCES deberíamos obtener los siguientes resultados
    // no debería existir infantes
    expect(infants.babies).toBe(0)
    expect(infants.children).toBe(0)
    expect(infants.kids).toBe(0)
  })

  it('bad path 2', () => {
    // DADO que tenemos un arreglo con '0', '2', '15', '7' , '0', '17',  '18' , '19'
    const childrenAges: string[] = []

    // CUANDO clasifiquemos
    const infants = infantGrouping(childrenAges)
    // ENTONCES deberíamos obtener los siguientes resultados
    // no debería existir infantes
    expect(infants.babies).toBe(0)
    expect(infants.children).toBe(0)
    expect(infants.kids).toBe(0)
  })
})
